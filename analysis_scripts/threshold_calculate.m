%this script calculates T3SS on/off thresholds based on control data

clear
close all


%specify directory and subdirectories where control data is, each generated by GFP_MFI_parse.m (one folder per
%colony). 

folder='F:\Dropbox\Christina_scripts_for_github_upload\control_data\';
%For Macs, remember to change all slashes to backslashes (/)

%ExsA is the T3SS-negative control
exsafolders={'PA14 exsA Pt-sfGFP MinS_NTA s1 col1','PA14 exsA Pt-sfGFP MinS_NTA s1 col2','PA14 exsA Pt-sfGFP MinS_NTA s3 col3','PA14 exsA Pt-sfGFP MinS_NTA s3 col4','PA14 exsA Pt-sfGFP MinS_NTA s4 col5'};
exsdfolders={'PA14 exsD Pt-sfGFP s1 col1','PA14 exsD Pt-sfGFP s3 col2','PA14 exsD Pt-sfGFP s4 col3','PA14 exsD Pt-sfGFP s4 col4','PA14 exsD Pt-sfGFP s4 col5'};

mfiEXSA={};
% loop through del ExsA(neg control)

for colony=1:length(exsafolders)
directory=[folder exsafolders{colony}];

dirobj=dir([directory '/*.dat']);

fnames={};
[fnames{1:length(dirobj)}]=dirobj(:).name;
%load through timepoints
for t=1:length(dirobj)
%load .dat file in
    filename=[directory '/' fnames{t}];
    mfiEXSA{t,colony}=load(filename);
    tvecEXSA(t,colony)=str2num((filename((max(find(filename=='_'))+2):(max(find(filename=='.'))-1))));
end
end

mfiEXSD={};
% loop through del ExsD(pos control); same thing but 100% on
for colony=1:length(exsdfolders)
directory=[folder exsdfolders{colony}];
dirobj=dir([directory '/*.dat']);

fnames={};
[fnames{1:length(dirobj)}]=dirobj(:).name;
for t=1:length(dirobj)
   filename=[directory '/' fnames{t}];
    mfiEXSD{t,colony}=load(filename);
    tvecEXSD(t,colony)=str2num((filename((max(find(filename=='_'))+2):(max(find(filename=='.'))-1))));
%    meanD(t,colony)=nanmean([mfiEXSD{t,colony}]);
%    stdD(t,colony)=nanstd([mfiEXSD{t,colony}],1);
end
end
trainingsetinds=[1:5];
testsetinds=[1];

tvals=intersect(tvecEXSA(find(unique([tvecEXSA])>0)),tvecEXSD(find(unique([tvecEXSD])>0)));
for tind=1:length(dirobj)
timepoint=tvals(tind);
[indsA]=find(tvecEXSA==tvals(tind));
[indsD]=find(tvecEXSD==tvals(tind));
trainingset=[[mfiEXSA{indsA(trainingsetinds)}]' zeros(size([mfiEXSA{indsA(trainingsetinds)}]')) ;[mfiEXSD{indsD(trainingsetinds)}]' ones(size([mfiEXSD{indsD(trainingsetinds)}]'))];
meanA=nanmean(trainingset(trainingset(:,2)==0,1));
stdA=nanstd(trainingset(trainingset(:,2)==0,1),0);
meanD=nanmean(trainingset(trainingset(:,2)==1,1));
stdD=nanstd(trainingset(trainingset(:,2)==1,1),0);

testset=[[mfiEXSA{indsA(testsetinds)}]' zeros(size([mfiEXSA{indsA(testsetinds)}]')) ;[mfiEXSD{indsD(testsetinds)}]' ones(size([mfiEXSD{indsD(testsetinds)}]'))];
testints=0:0.5:1800;
La=normpdf(testints,meanA,stdA); %plot gaussian based on sample mean and SD
Ld=normpdf(testints,meanD,stdD); 
K=La./Ld; %calculate likelihood ratio of positive/negative
ps=chi2cdf(-2*log(K),1); %calculate probability based on likelihood ratio as a function of intensity
threshval(tind)=polyxpoly(testints,ps,1:length(ps),.5*ones(size(ps))); %threshold is found at equal likelihood
upperval(tind)=polyxpoly(testints,ps,1:length(ps),.95*ones(size(ps))); %upper confidence interval at 95%
lowerval(tind)=polyxpoly(testints,ps,1:length(ps),.05*ones(size(ps))); %lower confidence interval at 5%
%note that settings corrections need to be applied after this
end

%%
%save and output classification information as a table
classinfo=table(tvals,threshval',lowerval',upperval','VariableNames',{'frame','threshold','LCI','UCI'});
%csvwrite('class_info.csv',classinfo);
outdirectory='F:\Dropbox\Christina_scripts_for_github_upload\';
writetable(classinfo,[outdirectory 'class_info.csv']);

%%
%Plot histogram of ExsA and ExsD GFP MFIs and Calculating Threshold for T3SS-ON vs OFF.
figure(1)
subplot(3,1,1)
histogram(trainingset(trainingset(:,2)==1),'Normalization','pdf','BinMethod','sqrt')
%%
%output summary plots
figure(1)
subplot(3,1,1)
for i = 1:length(tvals)
   % figure(i)
%    subplot(length(tvals),1,i)
    mfisEXSA=[mfiEXSA{find(tvecEXSA==tvals(i))}];
        mfisEXSD=[mfiEXSD{find(tvecEXSD==tvals(i))}];
    [x h]=histcounts([mfisEXSA mfisEXSD],'BinMethod','sqrt','Normalization','Count');
    BW=mean(diff(h));    
        histogram(mfisEXSA,'BinWidth',BW,'Normalization','pdf','FaceColor','k','FaceAlpha',0.2)
            hold on
plot(testints,La,'-k','LineWidth',2)
    histogram(mfisEXSD,'BinWidth',BW,'Normalization','pdf','FaceColor','g','FaceAlpha',0.2)
   plot(testints,Ld,'-g','LineWidth',2)
    xlim([0 1800])
%title(['frame' num2str(tvals(i))])
       meanA(i)=nanmean(mfisEXSA);
       
       stdA(i)=nanstd(mfisEXSA);
              meanD(i)=nanmean(mfisEXSD);
       stdD(i)=nanstd(mfisEXSD);
end
box off
ylabel('PDF')

legend({'\Delta ExsA','Gaussian PDF','\Delta ExsD','Gaussian PDF'})

subplot(3,1,2)
hold on
plot(testints,log(K),'.k')
BFdata=log(normpdf(testset(:,1),meanA,stdA)./normpdf(testset(:,1),meanD,stdD));

%gscatter(testset(:,1),BFdata,testset(:,2))
plot(testints,zeros(size(testints)),'m.-')
%xlabel('Intensity')
ylabel('log(L_{A}/L_{D})')
ylim([-100 100])
xlim([0 1800])

subplot(3,1,3)
box off
%pinds=(max(find(ps==min(ps))):min(find(ps==max(ps))))
%interp1(ps(pinds),testints(pinds),[0.05 0.5 .95]);
plot(testints,ps,'k.-')
ylim([-.05 1.05])
xlim([0 1800])
ylabel('p')
hold on
plot(testints,ones(size(testints)).*.05,'m--')
plot(testints,ones(size(testints)).*.95,'m--')
plot(testints,ones(size(testints)).*.5,'m.-')
xlabel('GFP Mean Fluorescence Intensity')
ylabel('p_{A}')
%%
hours=transpose((tvals-1)./4);
figure(length(tvals)+1)
errorbar(hours,meanA,stdA,'.g');
hold on
errorbar(hours,meanD,stdD,'.k');
xlabel('Time (hours)')
ylabel('Intensity (AU)')
xlim([-2 8])
set(gca,'TickDir','out')
box off
threshval_3s=1.32+threshval;
errorbar(hours,threshval,threshval-lowerval,upperval-threshval,'.m');
